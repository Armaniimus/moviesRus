-- MySQL Script generated by MySQL Workbench
-- Thu Nov 29 09:30:08 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema moviesRus
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema moviesRus
-- -----------------------------------------------------
DROP DATABASE moviesRus;
CREATE DATABASE IF NOT EXISTS `moviesRus` DEFAULT CHARACTER SET utf8 ;
USE `moviesRus`;

-- -----------------------------------------------------
-- Table `moviesRus`.`actor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `moviesRus`.`actor` (
  `act_id` INT NOT NULL AUTO_INCREMENT,
  `act_fname` VARCHAR(20) NULL,
  `act_lname` VARCHAR(20) NULL,
  `act_gender` CHAR(1) NULL,
  PRIMARY KEY (`act_id`));


-- -----------------------------------------------------
-- Table `moviesRus`.`movie`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `moviesRus`.`movie` (
  `mov_id` INT NOT NULL AUTO_INCREMENT,
  `mov_title` VARCHAR(50) NULL,
  `mov_year` INT NULL,
  `mov_time` INT NULL,
  `mov_lang` CHAR(50) NULL,
  `mov_rt_rel` DATE NULL,
  `mov_rel_country` CHAR(5) NULL,
  PRIMARY KEY (`mov_id`),
  UNIQUE INDEX `movie_id_UNIQUE` (`mov_id` ASC) );



-- -----------------------------------------------------
-- Table `moviesRus`.`movie cast`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `moviesRus`.`movie cast` (
  `act_id` INT NOT NULL,
  `mov_id` INT NOT NULL,
  `role` CHAR(30) NULL,
  INDEX `fk_movie cast_actor_idx` (`act_id` ASC) ,
  INDEX `fk_movie cast_movie1_idx` (`mov_id` ASC),
  CONSTRAINT `fk_movie cast_actor`
    FOREIGN KEY (`act_id`)
    REFERENCES `moviesRus`.`actor` (`act_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_movie cast_movie1`
    FOREIGN KEY (`mov_id`)
    REFERENCES `moviesRus`.`movie` (`mov_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `moviesRus`.`genres`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `moviesRus`.`genres` (
  `gen_id` INT NOT NULL AUTO_INCREMENT,
  `gen_title` CHAR(20) NULL,
  PRIMARY KEY (`gen_id`),
  UNIQUE INDEX `gen_id_UNIQUE` (`gen_id` ASC) );


-- -----------------------------------------------------
-- Table `moviesRus`.`movie_genres`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `moviesRus`.`movie_genres` (
  `mov_id` INT NOT NULL,
  `gen_id` INT NOT NULL,
  INDEX `fk_movie_genres_movie1_idx` (`mov_id` ASC) ,
  INDEX `fk_movie_genres_genres1_idx` (`gen_id` ASC) ,
  CONSTRAINT `fk_movie_genres_movie1`
    FOREIGN KEY (`mov_id`)
    REFERENCES `moviesRus`.`movie` (`mov_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_movie_genres_genres1`
    FOREIGN KEY (`gen_id`)
    REFERENCES `moviesRus`.`genres` (`gen_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `moviesRus`.`reviewer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `moviesRus`.`reviewer` (
  `rev_id` INT NOT NULL AUTO_INCREMENT,
  `rev_name` CHAR(30) NULL,
  PRIMARY KEY (`rev_id`),
  UNIQUE INDEX `red_id_UNIQUE` (`rev_id` ASC) );


-- -----------------------------------------------------
-- Table `moviesRus`.`rating`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `moviesRus`.`rating` (
  `rev_id` INT NOT NULL,
  `mov_id` INT NOT NULL,
  `rev_stars` INT NULL,
  `num_o_ratings` INT NULL,
  INDEX `fk_rating_reviewer1_idx` (`rev_id` ASC) ,
  INDEX `fk_rating_movie1_idx` (`mov_id` ASC) ,
  CONSTRAINT `fk_rating_reviewer1`
    FOREIGN KEY (`rev_id`)
    REFERENCES `moviesRus`.`reviewer` (`rev_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_rating_movie1`
    FOREIGN KEY (`mov_id`)
    REFERENCES `moviesRus`.`movie` (`mov_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `moviesRus`.`director`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `moviesRus`.`director` (
  `dir_id` INT NOT NULL AUTO_INCREMENT,
  `dir_fname` CHAR(20) NULL,
  `dir_lname` CHAR(20) NULL,
  PRIMARY KEY (`dir_id`),
  UNIQUE INDEX `dir_id_UNIQUE` (`dir_id` ASC) );


-- -----------------------------------------------------
-- Table `moviesRus`.`movie_direction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `moviesRus`.`movie_direction` (
  `director_dir_id` INT NOT NULL,
  `movie_mov_id` INT NOT NULL,
  INDEX `fk_movie_direction_director1_idx` (`director_dir_id` ASC) ,
  INDEX `fk_movie_direction_movie1_idx` (`movie_mov_id` ASC) ,
  CONSTRAINT `fk_movie_direction_director1`
    FOREIGN KEY (`director_dir_id`)
    REFERENCES `moviesRus`.`director` (`dir_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_movie_direction_movie1`
    FOREIGN KEY (`movie_mov_id`)
    REFERENCES `moviesRus`.`movie` (`mov_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
